// Numeric constant literals
// -------------------------

di1 = 1             // Decimal integer
di2 = 429           // Decimal integer > 255
dr1 = 1.2           // Decimal real
dr2 = .2            // Decimal real (no leading integer)
hi  = 0xE           // Hexadecimal integer
hr1 = 0xa.f         // Hexidecimal real
hr2 = 0x.f          // Hexidecimal real (no leading integer)
str = "hello"       // String
e   = ""            // Empty string

/*
// Normal/long function definition
fn f(x) {
    local y = x ** 2
    return x + y
}
*/

// Control structures
// ------------------

if a == 1 print x
if b == 2 {
    print "b is 2"
    exit
} else if b == 3 {
    print "b is 3"
    exit
} else {
    print "b is something else"
    exit
}

a = x ? y : z       // Standard ternary op
b = x ?: y          // Equivalent to b = x ? x : y

x = a ? b           // Chained ternary
  : c ? d
  : e ? f
  : g

y = a ? b ? c ? d   // Nested ternary
      : e : f : g

// Various for loops
/* for i=1..10 print a[i] */
/* for i=1..10,1 print a[i] */
/* for i=10..1 print a[i] */
/* for i=10..1,-1 print a[i] */
/* for i=1; i<10; i++ print a[i] */

// While loops
while h++ < 10 print h
while h-- > 0 {
    print "h is"  //, h
}


// Pitfalls
// --------

// Case 1: `x++` part of return statement
if x == 1
    return
x++

// Solution: Use semicolon after `return`...
if x == 1
    return;
x++

// ...or enclose in braces
if x == 1 {
    return
}
x++


// Case 2: increment/decrement between two valid symbols will be
// parsed as post-increment/decrement for the preceding symbol
x = y
++z

// Solution: Use semicolon...
x = y;
++z

// ...or use post-increment if applicable
x = y
z++

// Related: increment/decrement following constant should terminate
// parsing for the current expr, saving the increment/decrement for
// the next expr
x = 1
++y


/* j = {0,1,2,3,4}     // Standard array */

/* // Array holding anonymous functions */
/* ops = { */
/*     fn () = exit 0, */
/*     fn () { r[w] = y                     ip += 3 }, */
/*     fn () { s[si++] = x                  ip += 2 }, */
/*     fn () { r[w] = s[si] delete(s[si--]) ip += 2 }, */
/*     fn () { r[w] = y == z                ip += 4 }, */
/*     fn () { r[w] = y >  z                ip += 4 } */
/* } */
