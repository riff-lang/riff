// Intcode VM
// https://adventofcode.com/2019/day/2
// https://adventofcode.com/2019/day/5
// https://adventofcode.com/2019/day/9

/* p = {9,1,204,-1,2205,-1,8,99,0} // Quine */

// sum_of_primes(n)
/* p = {3,100,1007,100,2,7,1105,-1,87,1007,100,1,14,1105,-1,27,101,-2,100,100,101,1,101,101,1105,1,9,101,105,101,105,101,2,104,104,101,1,102,102,1,102,102,103,101,1,103,103,7,102,101,52,1106,-1,87,101,105,102,59,1005,-1,65,1,103,104,104,101,105,102,83,1,103,83,83,7,83,105,78,1106,-1,35,1101,0,1,-1,1105,1,69,4,104,99} */
/* inpv = {10}        // 17 */
/* inpv = {100000}    // 454396537 */
/* inpv = {2000000}   // 142913828922 */

// factor(n)
p = {3,1,109,583,108,0,1,9,1106,-1,14,4,1,99,107,0,1,19,1105,-1,27,104,-1,102,-1,1,1,21101,0,38,0,20101,0,1,1,1105,1,138,2101,1,1,41,101,596,41,45,1101,1,596,77,1101,0,1,53,101,1,77,77,101,1,53,53,7,45,77,67,1105,-1,128,108,1,1,74,1105,-1,128,1005,-1,54,1,53,77,93,7,45,93,88,1105,-1,101,1101,0,1,-1,1,53,93,93,1105,1,83,21101,0,116,0,20101,0,1,1,20101,0,53,2,1105,1,235,1205,2,54,4,53,2101,0,1,1,1105,1,101,108,1,1,133,1105,-1,137,4,1,99,22101,0,1,2,22101,0,1,1,21101,0,163,3,22101,0,1,4,22101,0,2,5,109,3,1105,1,198,109,-3,22102,-1,1,1,22201,1,4,3,22102,-1,1,1,1208,3,0,182,2105,-1,0,1208,3,1,189,2105,-1,0,22101,0,4,1,1105,1,146,1207,1,1,203,2105,-1,0,21101,0,222,3,22101,0,2,4,22101,0,1,5,109,3,1105,1,235,109,-3,22201,1,4,1,21101,0,2,2,1105,1,235,1105,0,280,101,383,236,243,1107,-1,583,247,1106,-1,276,101,383,236,256,102,1,275,-1,102,2,275,275,1007,275,0,266,1105,-1,280,101,1,236,236,1105,1,238,1,101,-1,236,236,101,383,236,286,207,1,-1,289,1106,-1,-1,22101,0,1,3,2102,1,2,363,2102,-1,2,369,22102,0,1,1,22102,0,2,2,101,1,236,320,101,-1,320,320,1107,-1,0,324,2105,-1,0,22102,2,2,2,101,383,320,336,207,3,-1,339,1105,-1,361,22101,1,2,2,22102,-1,3,3,101,383,320,354,22001,-1,3,3,22102,-1,3,3,1207,2,-1,366,1105,-1,315,22101,-1,2,2,101,383,320,377,22001,-1,1,1,1105,1,315}
inpv = {399}   // 3, 7, 19

// ackermann(m, n)
/* p = {109,99,21101,0,13,0,203,1,203,2,1105,1,16,204,1,99,1205,1,26,22101,1,2,1,2105,1,0,1205,2,40,22101,-1,1,1,21101,0,1,2,1105,1,16,21101,0,57,3,22101,0,1,4,22101,-1,2,5,109,3,1105,1,16,109,-3,22101,0,4,2,22101,-1,1,1,1105,1,16} */

verbose = 1

fn input {
    p[rx] = inpv[inpc++]
    ip += 2
}

fn output {
    if verbose
        outv[outc++] = x
    else
        x
    ip += 2
}

fn flush_output {
    "--- BEGIN OUTPUT ---"
    for v in outv
        v
    "--- END OUTPUT ---"
}

// Opcodes
opcode = {
    null,
    fn { p[rz] = x + y  ip += 4 },   // add
    fn { p[rz] = x * y  ip += 4 },   // mul
    fn { input()                },   // in
    fn { output()               },   // out
    fn { ip =  x ? y :  ip +  3 },   // jt
    fn { ip = !x ? y :  ip +  3 },   // jf
    fn { p[rz] = x <  y ip += 4 },   // lt
    fn { p[rz] = x == y ip += 4 },   // eq
    fn { r += x         ip += 2 }    // rel
}

// halt
opcode[99] = fn {
    if verbose
        flush_output()
    exit
}

// Opcode mnemonics
m = { "nop ", "add ", "mul ", "in  ", "out ", "jt  ", "jf  ", "lt  ", "eq  ", "rel " }
m[99] = "halt"

fn rel_str(p,rb) {
    rb_op = p >= 0 ? "+" : ""
    return p == 0 ? "*"::rb : "*("::rb::rb_op::p::")"
}

disas = {
    null,
    fn { ip, zm,  ym, xm, m[op], px, py, pz },
    fn { ip, zm,  ym, xm, m[op], px, py, pz },
    fn { ip, "   ",   xm, m[op], px },
    fn { ip, "   ",   xm, m[op], px },
    fn { ip, " ", ym, xm, m[op], px, py },
    fn { ip, " ", ym, xm, m[op], px, py },
    fn { ip, zm,  ym, xm, m[op], px, py, pz },
    fn { ip, zm,  ym, xm, m[op], px, py, pz },
    fn { ip, "   ",   xm, m[op], px }
}

disas[99] = fn {
    ip, "     ", m[op]
    "halted successfully"
    "instruction count:", count
}

ip = 0
while 1 {
    op  = p[ip]
    xm  = op / 100   % 10 | 0
    ym  = op / 1000  % 10 | 0
    zm  = op / 10000 % 10 | 0
    op %= 100
    x   = xm == 1 ? p[ip+1]
        : xm == 2 ? p[p[ip+1]+r]
        : p[p[ip+1]]
    y   = ym == 1 ? p[ip+2]
        : ym == 2 ? p[p[ip+2]+r]
        : p[p[ip+2]]
    rx  = xm ? p[ip+1]+r : p[ip+1]
    rz  = zm ? p[ip+3]+r : p[ip+3]
    p[rz] = p[rz] ?: 0
    if verbose {
        px = xm == 1 ? p[ip+1]
           : xm == 2 ? rel_str(p[ip+1], r)::"->"::x
           : "*"::p[ip+1]::"->"::x
        py = ym == 1 ? p[ip+2]
           : ym == 2 ? rel_str(p[ip+2], r)::"->"::y
           : "*"::p[ip+2]::"->"::y
        pz = zm ? rel_str(p[ip+3], r)::"->"::p[rz]
           : "*"::p[ip+3]::"->"::p[rz]
        disas[op]()
    }
    opcode[op]()
    count++
}
