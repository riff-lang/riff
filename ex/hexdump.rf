#!/usr/bin/env riff

// Reversible hexdump utility

fn dump(f) {
    while !eof(f) {
        if !(s = read(f,16)) break
        printf("%07x0: ", ln++)
        for i in #s-1
            printf(i == 7 ? "%02x  " : "%02x ", byte(s,i))
        if #s < 16
            for i in #s..15
                write(i == 7 ? "    " : "   ")
        printf(" %s\n", gsub(s, /[^ -~]/, "."))
    }
}

fn rev(f) {
    while !eof(f) {
        s = read(f)
        if s ~ /.*: (.{48})/
            for i in split($1)
                putc(num(i,16))
    }
}

opt = arg[1] == "-r"
f = arg[2] ? open(arg[2]) : !opt && arg[1] ? open(arg[1]) : stdin
opt ? rev(f) : dump(f)
close(f)
