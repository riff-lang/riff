// Pitfalls

// Case 1: `x++` part of return statement
if x == 1
    return
x++

// Solution: Use semicolon after `return`...
if x == 1
    return;
x++

// ...or enclose in braces
if x == 1 {
    return
}
x++


// Case 2: increment/decrement between two valid symbols will be
// parsed as post-increment/decrement for the preceding symbol
x = y
++z

// Solution: Use semicolon...
x = y;
++z

// ...or use post-increment if applicable
x = y
z++

// Related: increment/decrement following constant should terminate
// parsing for the current expr, saving the increment/decrement for
// the next expr
x = 1
++y


// Case 3: Symbol precedes parenthesized expr. This will be parsed as
// a function call y()
// This currently causes the program to hang
/* x = y */
/* (z + 1) / 2 */

